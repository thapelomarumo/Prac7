/*-------------------------------------------------------------------------
XXX.cs -- Generic Driver class
Compiler Generator Coco/R,
Copyright (c) 1990, 2004 Hanspeter Moessenboeck, University of Linz
extended by M. Loeberbauer & A. Woess, Univ. of Linz
extended (June 2004) by Pat Terry, Rhodes University (p.terry@ru.ac.za)
(changes marked as "pdt")

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

As an exception, it is allowed to write an extension of Coco/R that is
used as a plugin in non-free software.

If not otherwise stated, any source code generated by Coco/R (other than
Coco/R itself) does not fall under the GNU General Public License.
-------------------------------------------------------------------------*/
-->begin
/* Generic driver frame file for Coco/R for C#.
   PDT  October 2005 - for CSC 301 pracs
   Modify this to suit your own purposes - hints are given below! */

//  ----------------------- you may need to change the "using" clauses:

using System;
using System.IO;
using System.Text;
using Library;

namespace -->namespace {

  public class -->class {

    public static void Main (string[] args) {
      bool mergeErrors = false;
      string inputName = null;

      // ------------------------ you may need to process command line parameters:

      for (int i = 0; i < args.Length; i++) {
        if (args[i].ToLower().Equals("-l")) mergeErrors = true;
        else inputName = args[i];
      }
      if (inputName == null) {
        Console.WriteLine("No input file specified");
        System.Environment.Exit(1);
      }

      int pos = inputName.LastIndexOf('/');
      if (pos < 0) pos = inputName.LastIndexOf('\\');
      string dir = inputName.Substring(0, pos+1);

/*++++ If the parser needs an output file, include a section like the following
       and add a line

            public static OutFile output;

       to your ATG file.

      string outputName = null;
      pos = inputName.LastIndexOf('.');
      if (pos < 0) outputName = inputName + ".out";
      else outputName = inputName.Substring(0, pos) + ".out";
      Parser.output = new OutFile(outputName);
      if (Parser.output.OpenError()) {
        Console.WriteLine("cannot open " + outputName);
        System.Environment.Exit(1);
      }

++++++ */

      Scanner.Init(inputName);
      Errors.Init(inputName, dir, mergeErrors);
      //  ----------------------- add other initialization if required:
      Parser.Parse();
      Errors.Summarize();
      //  ----------------------- add other finalization if required:

/*++++ If the parser needs an output file, uncomment this section
      Parser.output.Close();
++++++ */

    }

  } // end driver

} // end namespace
$$$
